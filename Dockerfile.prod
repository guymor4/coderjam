# Production Dockerfile - combines frontend and backend
FROM node:20-alpine AS builder

WORKDIR /app

# Enable corepack for Yarn 4.0+
RUN corepack enable

# Copy all package folders with their individual package.json files
COPY shared/ ./shared/
COPY frontend/ ./frontend/
COPY backend/ ./backend/

# Install dependencies for each package
RUN cd shared && yarn install
RUN cd frontend && yarn install
RUN cd backend && yarn install

# Build shared library first
RUN cd shared && yarn build

# Build frontend
RUN cd frontend && yarn build

# Build backend
RUN cd backend && yarn build

# Production stage
FROM node:20-alpine AS production

WORKDIR /app

# Set production environment
ENV NODE_ENV=production

# Enable corepack for Yarn 4.0+
RUN corepack enable

# Set up shared library as a proper node module
COPY --from=builder /app/shared/dist ./node_modules/coderjam-shared/dist/
COPY --from=builder /app/shared/package.json ./node_modules/coderjam-shared/

# Copy only production backend dependencies (without devDependencies)
COPY --from=builder /app/backend/node_modules ./backend/node_modules
COPY --from=builder /app/backend/package.json ./backend/

# Copy built backend
COPY --from=builder /app/backend/dist ./backend/dist
COPY --from=builder /app/backend/sql ./backend/sql

# Copy built frontend to be served by the backend
COPY --from=builder /app/frontend/dist ./public

# Expose port 8080 for the combined application
EXPOSE 8080

# Start the built backend server
CMD ["node", "backend/dist/server.js"]